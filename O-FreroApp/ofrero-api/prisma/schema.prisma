generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  email        String @unique
  fullName     String
  passwordHash String
  role         Role   @default(USER)

  orders    Order[]
  addresses    Address[]
  cart      Cart?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  priceCents  Int
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  isFeatured  Boolean   @default(false)
  orderItems OrderItem[]
  cartItems  CartItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Order {
  id                    String      @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                OrderStatus @default(PENDING)
  totalCents            Int         @default(0)
  stripePaymentIntentId String?     @unique
// Snapshot de l'adresse Ã  ce niveau la 
  shippingLine1       String
  shippingLine2       String?
  shippingCity        String
  shippingPostalCode  String
  shippingPhone       String

  items     OrderItem[]
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1      String
  line2      String?
  city       String
  postalCode String
  phone      String
  isDefault  Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  name           String
  unitPriceCents Int
  quantity       Int
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider  String // "stripe"
  status    String // "succeeded" | "failed" | etc.
  intentId  String   @unique
  createdAt DateTime @default(now())
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id     String @id @default(cuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  quantity Int @default(1)

  @@unique([cartId, productId], name: "cartId_productId")
}
